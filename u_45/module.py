import paramiko

from u_45.enum import DIAGNOSIS_TYPE, DIAGNOSIS_CONDITIONS, EXECUTE_COMMAND
from common.module import has_file

def validate(client: paramiko.SSHClient, file_path: str) -> bool:
    return has_file(client, file_path)


def diagnosis(client: paramiko.SSHClient, os) -> tuple[bool, dict]:
    commands = _get_execute_commands(os)
    conditions = _get_diagnosis_conditions(os)
    
    diagnosis_result = [
        {
            "target": condition["check"],
            "diagnosis": _get_condition_type_diagnosis_result(client, f"cat {condition['file_path']} | grep -i '{condition['check']}'", condition["criterias"])
        } if condition["type"] == DIAGNOSIS_TYPE.CONDITION else
        {
            "target": condition["check"],
            "diagnosis": _get_exist_type_diagnosis_result(client, f"cat {condition['file_path']} | grep -i '{condition['check']}'")
        } if condition["type"] == DIAGNOSIS_TYPE.EXIST else
        {
            "target": condition["check"],
            "diagnosis": _get_sudo_condition_diagsnosis_result(client, f"cat {condition['file_path']} | grep -i '{condition['check']}'", condition["criterias"])
        } if condition["type"] == DIAGNOSIS_TYPE.SUDO_CONDITION else
        {
            "target": f"check auth in '{condition['file_path']}'",
            "diagnosis": _get_check_auth_diagnosis_result(client, f"ls -al {condition['file_path']}", condition["criterias"])
        }
        for condition in conditions
    ]

    execute_commans_result = [
        {
            "target": command,
            "diagnosis": _get_execute_command_diagosis_result(client, command)
        }
        for command in commands
    ]

    diagnosis_result += execute_commans_result

    abnormal_result = all([result["diagnosis"]["result"] for result in diagnosis_result if result["diagnosis"] is not None and not result["diagnosis"]["result"]])
    
    return abnormal_result, diagnosis_result

def _get_diagnosis_conditions(os: str) -> list[dict]:
    return DIAGNOSIS_CONDITIONS[os.upper()].value

def _get_execute_commands(os: str) -> list[str]:
    return EXECUTE_COMMAND[os.upper()].value

def _get_condition_type_diagnosis_result(client: paramiko.SSHClient, command, criterias: dict) -> dict:
    stdin, stdout, stderr = client.exec_command(command)
    find_result = stdout.read().decode("utf-8")
    diagnosis_result = None

    if _has_comment(find_result):
        find_result = ""
    
    target = find_result.split(" = ")[-1].strip()
    parsed_target = None if find_result == "" else int(target) if target.isdigit() else f"'{target}'"

    if parsed_target is not None:
        diagnosis_result = _check_criterias(parsed_target, criterias)
    
    return {
        "result": diagnosis_result,
        "target": parsed_target,
        "criterias": criterias
    }

def _get_exist_type_diagnosis_result(client: paramiko.SSHClient, command) -> dict:
    stdin, stdout, stderr = client.exec_command(command)
    find_result = stdout.read().decode("utf-8")
    diagnosis_result = None

    if _has_comment(find_result):
        find_result = ""
    
    diagnosis_result = True if find_result != "" else False
    parsed_target = None if find_result == "" else f"'{find_result}'"

    return {
        "result": diagnosis_result,
        "target": parsed_target,
        "criterias": "match check"
    }

def _get_sudo_condition_diagsnosis_result(client: paramiko.SSHClient, command, criterias: dict) -> dict:
    stdin, stdout, stderr = client.exec_command(command)
    find_result = stdout.read().decode("utf-8")
    diagnosis_result = None

    if _has_comment(find_result):
        find_result = ""

    target = find_result.split(":")[0].strip()
    parsed_target = None if find_result == "" else f"'{target}'"

    if parsed_target is not None:
        diagnosis_result = _check_criterias(parsed_target, criterias)
    
    return{
        "result": diagnosis_result,
        "target": parsed_target,
        "criterias": criterias
    }

def _get_check_auth_diagnosis_result(client: paramiko.SSHClient, command, criterias: dict) -> dict:
    stdin, stdout, stderr = client.exec_command(command)
    find_result = stdout.read().decode("utf-8")
    diagnosis_result = None
    
    target = find_result.split(" ")[0].strip()
    parsed_target = None if find_result == "" else f"'{target}'"

    if parsed_target is not None:
        diagnosis_result = _check_criterias(parsed_target, criterias)
    
    return {
        "result": diagnosis_result,
        "target": parsed_target,
        "criterias": criterias
    }

def _has_comment(result: str) -> bool:
    return True if "#" in result else False

def _check_criterias(target, criterias: str) -> bool:
    return any([eval(f"{target} {criteria}") for criteria in criterias])

def _get_execute_command_diagosis_result(client: paramiko.SSHClient, command) -> dict:
    stdin, stdout, stderr = client.exec_command(command)
    find_result = stdout.read().decode("utf-8")
    diagnosis_result = None

    if _has_comment(find_result):
        find_result = None
    
    diagnosis_result = True if find_result else False

    return {
        "result": diagnosis_result,
        "target": f"execute command '{command}'",
        "criterias": "execute command"
    }

def show_result(abnormality: bool, diagnosis_result: dict) -> None:
    print("최종 진단 결과 : ", "양호" if abnormality else "취약")
    print("상세 결과 : ")
    for index, detail in enumerate(diagnosis_result):
        print(f"{index + 1}. {detail['target']}")
        print(f"진단 결과: {"양호" if detail['diagnosis']['result'] else "취약" if  detail['diagnosis']['result'] is False else "N/A"}")
        print(f"현재 값 : {detail['diagnosis']['target']}")
        print(f"진단 기준 : {detail['diagnosis']['criterias']}\n")