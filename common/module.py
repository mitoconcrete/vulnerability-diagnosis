import platform
import paramiko

from common.dto import DiagnosisResult
from common.type import DiagnosisCondition

def _execute_command(client : paramiko.SSHClient, command : str) -> str:
    stdin, stdout, stderr = client.exec_command(command)
    return stdout.read().decode("utf-8")

def _is_command_result_exist(result : str) -> bool:
    return True if result != "" else False

def check_telnet(client : paramiko.SSHClient) -> None:
    command = "ps -ef | grep telnet"
    return _is_command_result_exist(_execute_command(client, command))

def check_ssh(client : paramiko.SSHClient) -> None:
    command = "ps -ef | grep ssh"
    return _is_command_result_exist(_execute_command(client, command))

def has_file(client : paramiko.SSHClient, filepath : str) -> bool:
    command = f"ls {filepath}"
    return _is_command_result_exist(_execute_command(client, command))

def get_os_type() -> str:
    return platform.system().upper()

def validate(client: paramiko.SSHClient, filepath: str) -> bool:
    return has_file(client, filepath)

def _is_comment(result: str) -> bool:
    return True if "#" in result else False

def _compare(target, criterias: str) -> bool:
    return any([eval(f"{target} {criteria}") for criteria in criterias])

def _evaluate_final_result(diagnosis_results: list[DiagnosisResult]):
    results = [diagnosis.result for diagnosis in diagnosis_results if diagnosis.result is not None]
    return all(results)

def _get_diagnosis_result(client: paramiko.SSHClient, command, condition: DiagnosisCondition) -> DiagnosisResult:
    reference = _create_reference(_execute_command(client, command))
    target = _get_target_value(reference, condition)
    result = _compare(target, condition.criterias)
    
    return DiagnosisResult(
        target=target,
        result=result,
        criterias=condition.criterias
    )

def _get_execute_command_result(client: paramiko.SSHClient, command: str) -> DiagnosisResult:
    find_result = _execute_command(client, command)
    result = True if find_result else False

    return DiagnosisResult(
        target=command,
        result=result,
        criterias=None
    )

def _create_reference(reference: str) -> str:
    return "" if _is_comment(reference) else reference

def _get_target_value(reference: str, condition: DiagnosisCondition):
    if reference == "":
        return None
    parts = reference.split(condition.split_by)
    target_part = parts[condition.check_index].strip()
    return int(target_part) if target_part.isdigit() else f"'{target_part}'"

def show_result(final_result: bool, diagnosis_results: list[DiagnosisResult]) -> None:
    print("최종 진단 결과 : ", "양호" if final_result else "취약")
    print("상세 결과 : ")
    
    for index, diagnosis in enumerate(diagnosis_results):
        print(f"{index}. {diagnosis.target}")
        print(f"진단 결과: {"양호" if diagnosis.result else "취약" if  diagnosis.result is False else "N/A"}")
        print(f"현재 값 : {diagnosis.target}")
        print(f"진단 기준 : {diagnosis.criterias}\n")