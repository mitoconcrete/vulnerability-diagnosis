import platform
import paramiko

def _execute_command(client : paramiko.SSHClient, command : str) -> str:
    stdin, stdout, stderr = client.exec_command(command)
    return _execute_command(command)

def _is_command_result_exist(result : str) -> bool:
    return True if result != "" else False

def check_telnet(client : paramiko.SSHClient) -> None:
    command = "ps -ef | grep telnet"
    return _is_command_result_exist(_execute_command(command))

def check_ssh(client : paramiko.SSHClient) -> None:
    command = "ps -ef | grep ssh"
    return _is_command_result_exist(_execute_command(command))

def has_file(client : paramiko.SSHClient, filepath : str) -> bool:
    command = f"ls {filepath}"
    return _is_command_result_exist(_execute_command(command))

def get_os_type() -> str:
    return platform.system().upper()

def validate(client: paramiko.SSHClient, filepath: str) -> bool:
    return has_file(client, filepath)

def _has_comment(result: str) -> bool:
    return True if "#" in result else False

def _check_criterias(target, criterias: str) -> bool:
    return any([eval(f"{target} {criteria}") for criteria in criterias])

def _get_condition_type_diagnosis_result(client: paramiko.SSHClient, command, criterias: dict) -> dict:
    stdin, stdout, stderr = client.exec_command(command)
    find_result = stdout.read().decode("utf-8")
    diagnosis_result = None

    if _has_comment(find_result):
        find_result = ""

    target = find_result.split(" = ")[-1].strip()
    parsed_target = None if find_result == "" else int(target) if target.isdigit() else f"'{target}'"

    if parsed_target is not None:
        diagnosis_result = _check_criterias(parsed_target, criterias)
    
    return {
        "result": diagnosis_result,
        "target": parsed_target,
        "criterias": criterias
    }

def _get_exist_type_diagnosis_result(client: paramiko.SSHClient, command) -> dict:
    stdin, stdout, stderr = client.exec_command(command)
    find_result = stdout.read().decode("utf-8")
    diagnosis_result = None

    if _has_comment(find_result):
        find_result = ""
    
    diagnosis_result = True if find_result != "" else False
    parsed_target = None if find_result == "" else f"'{find_result}'"

    return {
        "result": diagnosis_result,
        "target": parsed_target,
        "criterias": "match check"
    }

def show_result(abnormality: bool, diagnosis_result: dict) -> None:
    print("최종 진단 결과 : ", "양호" if abnormality else "취약")
    print("상세 결과 : ")
    for index, detail in enumerate(diagnosis_result):
        print(f"{index}. {detail['target']}")
        print(f"진단 결과: {"양호" if detail['diagnosis']['result'] else "취약" if  detail['diagnosis']['result'] is False else "N/A"}")
        print(f"현재 값 : {detail['diagnosis']['target']}")
        print(f"진단 기준 : {detail['diagnosis']['criterias']}\n")