import paramiko

from common.dto import DiagnosisResult
from u_03.enum import DIAGNOSIS_CONDITION, OS_VERSION_STANDARD

from common.type import DiagnosisCondition
from common.module import _evaluate_final_result, _get_diagnosis_result


def diagnosis(client: paramiko.SSHClient, os: str, version: int = -1) -> tuple[bool, list[DiagnosisResult]]:
    conditions = _get_diagnosis_conditions(os, version)
    diagnosis_results: list[DiagnosisResult] = []

    for condition in conditions:
        command = f"cat {condition.filepath} | grep -i '{condition.target}'"
        result = _get_diagnosis_result(client, command, condition.criterias)
        diagnosis_results.append(result)

    final_result = _evaluate_final_result(diagnosis_results)
    
    return final_result, diagnosis_results

def _get_diagnosis_conditions(os: str, version: int) -> list[DiagnosisCondition]:
    os_name = os  # os_name을 os 파라미터로 초기화
    version_check_os = ["SOLARIS", "HP_UX"]
    os_name = _update_os_name_based_on_version(os_name, version, version_check_os)
    return DIAGNOSIS_CONDITION[os_name].value

def _update_os_name_based_on_version(os_name: str, version: int, version_check_os: list[str]) -> str:
    if os_name in version_check_os:
        if OS_VERSION_STANDARD[os_name].value <= version:
            return f"{os_name}_OVER"
        else:
            return f"{os_name}_UNDER"
    return os_name