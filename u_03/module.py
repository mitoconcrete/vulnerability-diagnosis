import paramiko

from u_03.enum import DIAGNOSIS_TYPE, DIAGNOSIS_CONDITIONS, OS_VERSION_STANDARD
from common.module import has_file

def validate(client: paramiko.SSHClient, file_path: str) -> bool:
    return has_file(client, file_path)


def diagnosis(client: paramiko.SSHClient, os, version) -> tuple[bool, dict]:
    conditions = _get_diagnosis_conditions(os, version)

    diagnosis_result = [{
        "target": condition["check"],
        "diagnosis": 
        _get_condition_type_diagnosis_result(client, f"cat {condition['file_path']} | grep -i '{condition["check"]}'", condition["criterias"])
        if condition["type"] == DIAGNOSIS_TYPE.CONDITION else \
        _get_exist_type_diagnosis_result(client, f"cat {condition['file_path']} | grep -i '{condition['check']}'")
    } for condition in conditions]

    abnormal_result = all([result["diagnosis"]["result"] for result in diagnosis_result if result["diagnosis"] is not None and not result["diagnosis"]["result"]])
    
    return abnormal_result, diagnosis_result

def _get_diagnosis_conditions(os: str, version: int) -> list[dict]:
    version_check_os = ["SOLARIS", "HP_UX"]
    os_name = os.upper()

    if os_name in version_check_os:
        if OS_VERSION_STANDARD[os.upper()].value <= version:
            os_name = f"{os_name}_OVER"
        os_name = f"{os_name}_UNDER"

    return DIAGNOSIS_CONDITIONS[os_name].value

def _get_condition_type_diagnosis_result(client: paramiko.SSHClient, command, criterias: dict) -> dict|None:
    stdin, stdout, stderr = client.exec_command(command)
    find_result = stdout.read().decode("utf-8")
    diagnosis_result = None

    # if _has_comment(find_result):
    #     find_result = ""
    
    target = find_result.split(" = ")[-1].strip()
    parsed_target = None if find_result == "" else int(target) if target.isdigit() else f"'{target}'"

    if parsed_target is not None:
        diagnosis_result = _check_criterias(parsed_target, criterias)
    
    return {
        "result": diagnosis_result,
        "target": target,
        "criterias": criterias
    }

def _get_exist_type_diagnosis_result(client: paramiko.SSHClient, command) -> dict|None:
    stdin, stdout, stderr = client.exec_command(command)
    find_result = stdout.read().decode("utf-8")
    diagnosis_result = None

    if _has_comment(find_result):
        find_result = ""
    
    diagnosis_result = True if find_result else False

    return {
        "result": diagnosis_result,
        "target": find_result.strip(),
        "criterias": "match check"
    }


def _has_comment(result: str) -> bool:
    return True if "#" in result else False

def _check_criterias(target, criterias: str) -> bool:
    return any([eval(f"{target} {criteria}") for criteria in criterias])

def show_result(abnormality: bool, diagnosis_result: dict) -> None:
    print("최종 진단 결과 : ", "양호" if abnormality else "취약")
    print("상세 결과 : ")
    for index, detail in enumerate(diagnosis_result):
        print(f"{index + 1}. {detail['target']}")
        print(f"진단 결과: {"양호" if detail['diagnosis']['result'] else "취약" if  detail['diagnosis']['result'] is False else "N/A"}")
        print(f"현재 값 : {detail['diagnosis']['target']}")
        print(f"진단 기준 : {detail['diagnosis']['criterias']}\n")