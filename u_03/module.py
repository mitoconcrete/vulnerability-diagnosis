import paramiko

from u_03.enum import DIAGNOSIS_TYPE, DIAGNOSIS_CONDITIONS, OS_VERSION_STANDARD
from common.module import _get_condition_type_diagnosis_result, _get_exist_type_diagnosis_result, has_file


def diagnosis(client: paramiko.SSHClient, os, version) -> tuple[bool, dict]:
    conditions = _get_diagnosis_conditions(os, version)

    diagnosis_result = [{
        "target": condition["check"],
        "diagnosis": 
        _get_condition_type_diagnosis_result(client, f"cat {condition['filepath']} | grep -i '{condition["check"]}'", condition["criterias"])
        if condition["type"] == DIAGNOSIS_TYPE.CONDITION else \
        _get_exist_type_diagnosis_result(client, f"cat {condition['filepath']} | grep -i '{condition['check']}'")
    } for condition in conditions]

    abnormal_result = all([result["diagnosis"]["result"] for result in diagnosis_result if result["diagnosis"] is not None and not result["diagnosis"]["result"]])
    
    return abnormal_result, diagnosis_result

def _get_diagnosis_conditions(os: str, version: int) -> list[dict]:
    version_check_os = ["SOLARIS", "HP_UX"]
    os_name = os.upper()

    if os_name in version_check_os:
        if OS_VERSION_STANDARD[os.upper()].value <= version:
            os_name = f"{os_name}_OVER"
        os_name = f"{os_name}_UNDER"

    return DIAGNOSIS_CONDITIONS[os_name].value