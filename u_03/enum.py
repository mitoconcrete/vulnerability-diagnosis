from enum import Enum

from common.type import DiagnosisCondition

class FILEPATH(Enum):
    SOLARIS_UNDER = ["/etc/default/login"]
    SOLARIS_OVER = ["/etc/default/login", "/etc/security/policy.conf"]
    LINUX = ["/etc/pam.d/system-auth"]
    AIX = ["/etc/security/user"]
    HP_UX_UNDER = ["/tcb/files/auth/system/default"]
    HP_UX_OVER = ["/etc/default/security"]

class DIAGNOSIS_CONDITION(Enum):
    LINUX = [
        DiagnosisCondition(
            target="auth required /lib/security/pam_tally.so deny",
            filepath=FILEPATH.LINUX.value[0],
            split=" = ",
            check_index=-1,
            criterias=["== 5"]
        ),
        DiagnosisCondition(
            target="unlock_time",
            filepath=FILEPATH.LINUX.value[0],
            split=" = ",
            check_index=-1,
            criterias=["== '120 no_magic_root'"]
        ),
        DiagnosisCondition(
            target="account required /lib/security/pam_tally.so",
            filepath=FILEPATH.LINUX.value[0],
            split="",
            check_index=-1,
            criterias=["== 'account required /lib/security/pam_tally.so'"]
        ),
        DiagnosisCondition(
            target="no_magic_root reset",
            filepath=FILEPATH.LINUX.value[0],
            split="",
            check_index=-1,
            criterias=["== 'no_magic_root reset'"]
        ),
    ]
    
    SOLARIS_UNDER = [
        DiagnosisCondition(
            target="RETRIES",
            filepath=FILEPATH.SOLARIS_UNDER.value[0],
            split=" = ",
            check_index=-1,
            criterias=["== 5"]
        )
    ]

    SOLARIS_OVER = [
        DiagnosisCondition(
            target="RETRIES",
            filepath=FILEPATH.SOLARIS_OVER.value[0],
            split=" = ",
            check_index=-1,
            criterias=["== 5"]
        ),
        DiagnosisCondition(
            target="LOCK_AFTER_RETRIES",
            filepath=FILEPATH.SOLARIS_OVER.value[1],
            split=" = ",
            check_index=-1,
            criterias=["== 'YES'"]
        )
    ]

    AIX = [
        DiagnosisCondition(
            target="loginretries",
            filepath=FILEPATH.AIX.value[0],
            split=" = ",
            check_index=-1,
            criterias=["== 10"]
        )
    ]

    HP_UX_UNDER = [
        DiagnosisCondition(
            target="u_maxtries",
            filepath=FILEPATH.HP_UX_UNDER.value[0],
            split=" = ",
            check_index=-1,
            criterias=["== 5"]
        )
    ]

    HP_UX_OVER = [
        DiagnosisCondition(
            target="AUTH_MAXTRIES",
            filepath=FILEPATH.HP_UX_OVER.value[0],
            split=" = ",
            check_index=-1,
            criterias=["== 10"]
        )
    ]

class OS_VERSION_STANDARD(Enum):
    SOLARIS = 5.9
    HP_UX = 3
